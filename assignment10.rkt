#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 4963 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 190
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e assignment10) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";Constants"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"GRID-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"GRID-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"CELL-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"ACTIVE-COLOR"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"STUCK-COLOR"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 17 #"TYPING-BOX-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 17 #"TYPING-BOX-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 11 #"GRID-HEIGHT"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-HEIGHT"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 10 #"GRID-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 10 #"CELL-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 11 #"CELL-HEIGHT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"TYPING-X"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"TYPING-Y"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 17 #"TYPING-BOX-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";List of words used for generate-word function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"DICTIONARY"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"random\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 11 #"\"spaghetti\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"generate\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 12 #"\"affordable\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 7 #"\"dairy\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"lamppost\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 11 #"\"endurance\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 7 #"\"koala\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"riesling\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 10 #"\"computer\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 7 #"\"never\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 12 #"\"diabolical\""
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 19 3 9 #"\"giraffe\""
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 23 29 1 #"\n"
0 0 17 3 36 #";A Word is a (make-word String posn)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"word"
0 0 23 3 2 #" ["
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 8 #"position"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; where:"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; - str is the String value of the word"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; - position is the x and y position of the word on the grid"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"chip\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"bottom\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"word-tmpl"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";A List of Words (LoW) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 13 #"; - empty '()"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; - cons(Word LoW)"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";;> Should be (cons Word LoW)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"low-tmpl"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 8 #"low-tmpl"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; A world (w) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; - (make-world LoW LoW String Boolean Number)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 3 2 #" ["
0 0 14 3 13 #"falling-words"
0 0 23 3 1 #" "
0 0 14 3 14 #"inactive-words"
0 0 23 3 1 #" "
0 0 14 3 12 #"current-word"
0 0 23 3 1 #" "
0 0 14 3 9 #"gen-word?"
0 0 23 3 1 #" "
0 0 14 3 5 #"score"
0 0 23 3 1 #" "
0 0 14 3 4 #"tick"
0 0 23 3 1 #" "
0 0 14 3 8 #"lim-tick"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 17 3 20 #"; A world represents"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; - falling words represents the list of falling words"
0 0 23 29 1 #"\n"
0 0 17 3 91
(
 #"; - inactive-words represents the list of words that have fallen and"
 #" are no longer falling."
) 0 0 23 29 1 #"\n"
0 0 17 3 43 #"; - current-word is what the user has typed"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; - gen-word? is the boolean that tells whether to generate a new wo"
 #"rd"
) 0 0 23 29 1 #"\n"
0 0 17 3 57 #"; - score is the number of process ticks that have passed"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; - tick is to manage the variable tick rate (EXTRA CREDIT)"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; - lim-tick is the tick number to process the world on (EXTRA CREDI"
 #"T)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 6 #"world1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-tmpl"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 8 #"low-tmpl"
0 0 23 3 2 #" ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 8 #"low-tmpl"
0 0 23 3 2 #" ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 9 #"word-tmpl"
0 0 23 3 2 #" ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 1 #"("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; play-game: World Number -> World or Image (last-scene is image)"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; Runs the Typaholic! game. Inputted tick rate will be reflected eve"
 #"ry"
) 0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #"; LIM-TICK-DEFAULT ticks. This is mitigated by running the (main tr)"
 #" function"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"play-game"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 3 1 #" "
0 0 14 3 2 #"tr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 23 3 1 #" "
0 0 14 3 5 #"world"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 7 #"on-tick"
0 0 23 3 1 #" "
0 0 14 3 7 #"process"
0 0 23 3 1 #" "
0 0 14 3 2 #"tr"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 7 #"to-draw"
0 0 23 3 1 #" "
0 0 14 3 12 #"render-world"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 6 #"on-key"
0 0 23 3 1 #" "
0 0 14 3 11 #"update-word"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 9 #"stop-when"
0 0 23 3 1 #" "
0 0 14 3 9 #"game-over"
0 0 23 3 1 #" "
0 0 14 3 10 #"last-scene"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; Cannot test (Big Bang breaks the design recipe)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; main: Number -> World or Image (last-scene is image)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; helper function to start the game easier if it helps"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 14 3 2 #"tr"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"play-game"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #">="
0 0 23 3 1 #" "
0 0 14 3 2 #"tr"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 2 #"tr"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 3 #") ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; Cannot test (Big Bang breaks the design recipe)"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; A NOTE ON THE 0.5 tr:"
0 0 23 29 1 #"\n"
0 0 17 3 82
(
 #"; The score is not variable by the tick rate, only by the frequency "
 #"defined by the"
) 0 0 23 29 1 #"\n"
0 0 17 3 82
(
 #"; world-tick and world-lim-tick, so to maintain consistency in the s"
 #"core, the same"
) 0 0 23 29 1 #"\n"
0 0 17 3 87
(
 #"; number should be used here. It's possible to make a really slow nu"
 #"mber here, and then"
) 0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #"; hit \"down\" to the max and get a crazy good score on slow moving "
 #"words, so don't cheat!"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 47 #";----------------------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";on tick:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; process : World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; Reconstructs the world assuring all updates are handled"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 90
(
 #";Testing & randomness- verifying that process returns a world with v"
 #"arious input variables"
) 0 0 23 29 1 #"\n"
0 0 17 3 68
#"; Cannot determine exact output with check-expects due to randomness"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"world?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"world?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"world?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; bool gen-word? is the one of the two things directly affected"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; by this function and not a helper, in two if cases"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 81
(
 #"; The other is the extra credit tick value. This makes the tick rate"
 #" (tr) in main"
) 0 0 23 29 1 #"\n"
0 0 17 3 68
#"; multiplicative of the lim-tick rate by incrementing here until gte"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"process"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 2 #">="
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 35 #"advance-wordgen-inactives-and-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"tick-world"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; tick-world: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; increases the tick by one of the given world"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"tick-world"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"tick-world"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"tick-world"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; advance-wordgen-inactives-and-score: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 86
(
 #"; Maybe generates words, updates inactives, flips word gen bool, and"
 #" updates the score"
) 0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #"; Could be separated into four helpers, but why waste the processing"
 #" power to do one update each?"
) 0 0 23 29 1 #"\n"
0 0 17 3 61
#"; Tests that introduce randomness cannot have an exact expect"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"world?"
0 0 23 3 2 #" ("
0 0 14 3 35 #"advance-wordgen-inactives-and-score"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 6 #"world?"
0 0 23 3 2 #" ("
0 0 14 3 35 #"advance-wordgen-inactives-and-score"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 35 #"advance-wordgen-inactives-and-score"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 1 #" "
0 0 20 3 2 #"40"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 35 #"advance-wordgen-inactives-and-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"generate-word-maybe"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 11 #"lower-words"
0 0 23 3 2 #" ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 13 #"get-inactives"
0 0 23 3 2 #" ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")) "
0 0 17 3 55 #";flip the bool so we do/dont generate next process tick"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 12 #"update-score"
0 0 23 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; x-range-overlap? Number Number Number Number -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; Checks if x1 and len1 range has an overlap with x2 and len2 range"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 4 #"len1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #" "
0 0 14 3 4 #"len2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 3 #") ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 4 #"len1"
0 0 23 3 2 #") "
0 0 14 3 2 #"x2"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 3 #") ("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 2 #"x1"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 2 #"x2"
0 0 23 3 1 #" "
0 0 14 3 4 #"len2"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; would-intersect? : Word Word -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; Checks if Word 1 would intersect with inactive Word 2 if moved dow"
 #"n"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"would-intersect?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"would-intersect?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 16 #"would-intersect?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"chip2\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"24"
0 0 23 3 1 #" "
0 0 20 3 2 #"21"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"would-intersect?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 57 #";They will intersect if w2's y is the same as w1's y + 1,"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 65
#";and the x to x+len(string) range of w1 doesn't overlap with w2's"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 16 #"x-range-overlap?"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 4 #")) ("
0 0 14 3 13 #"string-length"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 4 #")) ("
0 0 14 3 13 #"string-length"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; make-inactive? : Word LoW (loiw) -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; Checks if word hits bottom or any inactive words"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Test\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"19"
0 0 23 3 3 #")) "
0 0 14 3 5 #"list1"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #"; UPDATED - checks if the word is at the bottom or intersects with a"
 #"ny words using ormap"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 11 #"GRID-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 16 #"would-intersect?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 3 #"low"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; get-inactives : LoW -> LoW"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; If inactive, add to list of inactive words"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-inactives"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 2 #") "
0 0 14 3 5 #"list2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-inactives"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"bottom\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-inactives"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"32"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 9 #"make-word"
0 0 19 3 8 #"\"hello2\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 14 3 5 #"list2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #"("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"bottom\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 68
#"; UPDATED - uses filter to get all the lofw words that should become"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; inactive and appends to current loiw"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-inactives"
0 0 23 3 1 #" "
0 0 14 3 4 #"lofw"
0 0 23 3 1 #" "
0 0 14 3 4 #"loiw"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 4 #"loiw"
0 0 23 3 3 #")) "
0 0 14 3 4 #"lofw"
0 0 23 3 2 #") "
0 0 14 3 4 #"loiw"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; lower-word : Word -> Word"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; Increases the y value of the word by 1"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"lower-word"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Test1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Test1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"lower-word"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Test2\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Test2\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"lower-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-word"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #"("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; lower-words : LoW LoW -> LoW"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; Lower all of the falling worlds by one row, takes lofw and loiw"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"lower-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"lower-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                              ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 47 #"                                              ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"chip\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"25"
0 0 23 3 1 #" "
0 0 20 3 2 #"21"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"lower-words"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello2\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"39"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello3\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"35"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 5 #"list2"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"hello3\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"36"
0 0 23 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #"; UPDATED - filters out all the words that will remain active once m"
 #"oved"
) 0 0 23 29 1 #"\n"
0 0 17 3 62
#"; using filter and lowers the remaining falling words with map"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"lower-words"
0 0 23 3 1 #" "
0 0 14 3 4 #"lofw"
0 0 23 3 1 #" "
0 0 14 3 4 #"loiw"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 10 #"lower-word"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-inactive?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 4 #"loiw"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"lofw"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; get-word-at-n : LoS Number -> String"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; given a dictionary of words and an index, returns the word at that"
 #" index"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-word-at-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-word-at-n"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 14 3 2 #"w3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; UPDATED - uses list-ref instead of recursion"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-word-at-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; get-new-word : LoS -> Word"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; Get a random word string"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"word?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-new-word"
0 0 23 3 1 #" "
0 0 14 3 10 #"DICTIONARY"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-new-word"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"make-word"
0 0 23 3 2 #" ("
0 0 14 3 13 #"get-word-at-n"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; randomize-posx : Word -> Word"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; Takes a new word and updates its x coordinate"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";        -Should generate a random x less than the (edge-length)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"word?"
0 0 23 3 2 #" ("
0 0 14 3 14 #"randomize-posx"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"randomize-posx"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"make-word"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 10 #"GRID-WIDTH"
0 0 23 3 3 #") ("
0 0 14 3 13 #"string-length"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 5 #")))) "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; generate-word-maybe : LoW Boolean -> LoW"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; Create new word every other tick (update boolean of World), random"
 #"izing its x coord"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"generate-word-maybe"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 2 #"))"
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"generate-word-maybe"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 4 #"true"
0 0 23 3 2 #"))"
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 23 3 2 #" ("
0 0 14 3 19 #"generate-word-maybe"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 2 #"))"
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"generate-word-maybe"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 4 #"gen?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 4 #"gen?"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 14 #"randomize-posx"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-new-word"
0 0 23 3 1 #" "
0 0 14 3 10 #"DICTIONARY"
0 0 23 3 3 #")) "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; update-score: Number Number -> Number"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; Keeping score of game"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"update-score"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"update-score"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 20 3 3 #"102"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"update-score"
0 0 23 3 1 #" "
0 0 14 3 5 #"score"
0 0 23 3 1 #" "
0 0 14 3 4 #"freq"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 54 #"; The overall score is time lasted * inverse frequency"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 60
#"; Inverse frequency by default is 1, which we define as the "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 62
#"; standard every other tick rate. If using the \"up\" and \"down\""
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 65
#"; features, the addition to the score will reflect the difficulty"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 65
#"; For example, if default is dropped from 20 to 10, 2 points are "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 57 #"; added at each process tick, as it is twice as difficult"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 5 #"score"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 16 #"LIM-TICK-DEFAULT"
0 0 23 3 1 #" "
0 0 14 3 4 #"freq"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";------------------------------------------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";to draw:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; render-world World -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; Render the 3 parts of the world"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 23 3 1 #" "
0 0 14 3 6 #"world1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 19 #"place-falling-words"
0 0 23 3 2 #" ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 6 #"world1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 2 #" ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 6 #"world1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 58
#"                                                         ("
0 0 14 3 18 #"place-current-word"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 59
#"                                                          ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 6 #"world1"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 19 #"place-falling-words"
0 0 23 3 2 #" ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 2 #" ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 48 #"                                               ("
0 0 14 3 18 #"place-current-word"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; List of Strings (LOS) is one of:"
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; - empty"
0 0 23 29 1 #"\n"
0 0 17 3 20 #"; - cons(String LOS)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"TEST\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"los-templ"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"los-templ"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; grid-to-pix-x: Number -> Number "
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; Gives the pixel value of the desired column"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-x"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 20 3 5 #"157.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-x"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 3 #"7.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 2 #") "
0 0 14 3 10 #"CELL-WIDTH"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; grid-to-pix-y: Number -> Number "
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; Gives the pixel value of the desired row"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-y"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 20 3 5 #"157.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-y"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 3 #"7.5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"grid-to-pix-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 23 3 2 #") "
0 0 14 3 11 #"CELL-HEIGHT"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; place-letters: LoS Posn Color Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; Places an exploded word on the grid"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"place-letters"
0 0 23 3 1 #" "
0 0 14 3 4 #"los1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #") "
0 0 20 3 3 #"7.5"
0 0 23 3 1 #" "
0 0 20 3 3 #"7.5"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #") "
0 0 20 3 4 #"22.5"
0 0 23 3 1 #" "
0 0 20 3 3 #"7.5"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"S\""
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #") "
0 0 20 3 4 #"37.5"
0 0 23 3 1 #" "
0 0 20 3 3 #"7.5"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                     ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 66
#"                                                                  "
0 0 20 3 4 #"52.5"
0 0 23 3 1 #" "
0 0 20 3 3 #"7.5"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #"; OLD CODE -- In case youre confused about what's going on here and "
 #"why i added let-x"
) 0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 14 #"place-letters2"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 13 #" x y c scene)"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";  (cond [(empty? los) scene]"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";        [("
0 0 17 3 5 #"cons?"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 3 #") ("
0 0 17 3 11 #"place-image"
0 0 17 3 2 #" ("
0 0 17 3 4 #"text"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 18 #" los) FONT-SIZE c)"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";                                  (grid-to-pix-x x) (grid-to-pix-y "
 #"y)"
) 0 0 23 29 1 #"\n"
0 0 17 3 36 #";                                  ("
0 0 17 3 13 #"place-letters"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 3 #") ("
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 18 #" 1) y c scene))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 110
(
 #"; UPDATE - introduced let-x structure so that we could use foldr and"
 #" lambda while having an increasing x coord"
) 0 0 23 29 1 #"\n"
0 0 17 3 95
(
 #"; folds place image on let-x objects created from the los inputted. "
 #"I know this is a bit messy,"
) 0 0 23 29 1 #"\n"
0 0 17 3 101
(
 #"; but I was not marked on needing helper functions in the old code s"
 #"o I'm assuming I wont here either"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"place-letters"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 9 #"let-x-img"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 13 #"grid-to-pix-x"
0 0 23 3 2 #" ("
0 0 14 3 7 #"let-x-x"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 13 #"grid-to-pix-y"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                        "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 5 #"scene"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 19 #"make-letters-images"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";A let-x is a (make-let-x Image Number)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"let-x"
0 0 23 3 2 #" ["
0 0 14 3 3 #"img"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 17 3 8 #"; where:"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; - img is the text image of a letter"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; - x is its x-coordinate"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"lx1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-let-x"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"let-x-tmpl"
0 0 23 3 1 #" "
0 0 14 3 2 #"lx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"let-x-img"
0 0 23 3 1 #" "
0 0 14 3 2 #"lx"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 7 #"let-x-x"
0 0 23 3 1 #" "
0 0 14 3 2 #"lx"
0 0 23 3 2 #") "
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; Assume List-of let-x data definition as LoLX"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; make-letters-images: LoS Color -> LoLX"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; Returns list of let-x objects from the list of strings inputted,"
0 0 23 29 1 #"\n"
0 0 17 3 6 #"; with"
0 0 17 3 1 #" "
0 0 17 3 4 #"each"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 10 #"coordinate"
0 0 17 3 1 #" "
0 0 17 3 24 #"1 more than the previous"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-letters-images"
0 0 23 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-let-x"
0 0 23 3 1 #" "
0 12           4 60 119
(
 #"(#(struct:translate 2.0 10.0 #(struct:text \"t\" 0 1 \"blue\" 15 #f "
 #"swiss normal normal #f)) #(struct:bb 4.0 20.0 15.0) #f)"
) 0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 10 #"make-let-x"
0 0 23 3 1 #" "
0 12           4 60 119
(
 #"(#(struct:translate 4.0 10.0 #(struct:text \"e\" 0 1 \"blue\" 15 #f "
 #"swiss normal normal #f)) #(struct:bb 8.0 20.0 15.0) #f)"
) 0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 10 #"make-let-x"
0 0 23 3 1 #" "
0 12           4 60 119
(
 #"(#(struct:translate 4.0 10.0 #(struct:text \"s\" 0 1 \"blue\" 15 #f "
 #"swiss normal normal #f)) #(struct:bb 8.0 20.0 15.0) #f)"
) 0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 10 #"make-let-x"
0 0 23 3 1 #" "
0 12           4 60 119
(
 #"(#(struct:translate 2.0 10.0 #(struct:text \"t\" 0 1 \"blue\" 15 #f "
 #"swiss normal normal #f)) #(struct:bb 4.0 20.0 15.0) #f)"
) 0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-letters-images"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 3 #") ("
0 0 14 3 10 #"make-let-x"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"los"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; place-word: Word Color Image -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; Places a single word on the scene with the appropriate color"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 12 #"ACTIVE-COLOR"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 13 #"place-letters"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"h\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 13 #"place-letters"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 2 #") "
0 0 20 3 2 #"15"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 13 #"place-letters"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 7 #"explode"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"posn-x"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; place-falling-words LoW -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; Place the falling words with the appropriate color"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; UPDATE - added foldr and lambda for placing lofw"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 19 #"place-falling-words"
0 0 23 3 1 #" "
0 0 14 3 4 #"lofw"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 12 #"ACTIVE-COLOR"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 5 #"scene"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 14 3 4 #"lofw"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"place-falling-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 19 #"place-falling-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 23 29 1 #"\n"
0 0 23 3 50 #"                                                  "
0 0 14 3 5 #"SCENE"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; place-inactive-words LoW -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; Place the inactive words with the appropriate color"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list0"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #") "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 29 1 #"\n"
0 0 23 3 50 #"                                                  "
0 0 14 3 5 #"SCENE"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"place-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 4 #"loiw"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #") ("
0 0 14 3 10 #"place-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 11 #"STUCK-COLOR"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 5 #"scene"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 4 #"loiw"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; place-current-word String -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; Place the current word with the appropriate color"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 18 #"place-current-word"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 2 #") "
0 0 14 3 8 #"TYPING-X"
0 0 23 3 1 #" "
0 0 14 3 8 #"TYPING-Y"
0 0 23 3 1 #" "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"place-current-word"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 2 #") "
0 0 14 3 8 #"TYPING-X"
0 0 23 3 1 #" "
0 0 14 3 8 #"TYPING-Y"
0 0 23 3 1 #" "
0 0 14 3 5 #"scene"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #"; ------------------------------------------------------------------"
 #"-------"
) 0 0 23 29 1 #"\n"
0 0 17 3 8 #";on key:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; - update-word World KeyEvent -> World"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";       -if alphabetic, add letter,"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";       -if backspace, remove-letter,"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";       -if enter, delete-word, ( use remove function )"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";       -if else, do nothing"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 11 #";alphabetic"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 10 #";backspace"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"\\b\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tes\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 6 #";enter"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"\\r\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 5 #";down"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 3 #";up"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 5 #";else"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 4 #"\"\\t\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"update-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 18 #"string-alphabetic?"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 3 #") ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 12 #"handle-alpha"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\\b\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 11 #"handle-back"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\\r\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 12 #"handle-enter"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 35 #"; This is not an infinite increase!"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 11 #"handle-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 31 #"; This is an infinite increase!"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"key=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"handle-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #"]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; handle-alpha: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; adds a letter to the current word"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"handle-alpha"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #") "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"handle-alpha"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 23 3 2 #" ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 14 3 3 #"key"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; handle-back: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; Removes a letter from the current word"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"handle-back"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"tes\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"handle-back"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 13 #"remove-letter"
0 0 23 3 2 #" ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; handle-enter: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; increases the speed of the game by decrementing the limit tick to "
 #"a min of 2"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"handle-enter"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 8 #"\"friend\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 2 #"w4"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"handle-enter"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"remove-word"
0 0 23 3 2 #" ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 19 3 2 #"\"\""
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; Extra Credit"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; handle-down: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 78
(
 #"; increases the speed of the game by decrementing the limit tick to "
 #"a min of 2"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"handle-down"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"handle-down"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"max"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #"; Extra Credit"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; handle-up: World -> World"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; decreases the speed of the game by incrementing the limit tick"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"handle-up"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"test\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"handle-up"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 19 #"world-falling-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 18 #"world-current-word"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"world-gen-word?"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"world-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 14 #"world-lim-tick"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; remove-word : String LoW -> LoW"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; Removes any word matching the string from the LoW"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"remove-word"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #") "
0 0 14 3 5 #"list1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"remove-word"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 2 #"w2"
0 0 23 3 2 #") "
0 0 14 3 5 #"list1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 1 #" "
0 0 14 3 2 #"w3"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"remove-word"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 2 #"w1"
0 0 23 3 2 #") "
0 0 14 3 5 #"list0"
0 0 23 3 2 #") "
0 0 14 3 5 #"empty"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; UPDATED - Uses filter rather than recursing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"remove-word"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"s"
0 0 23 3 3 #") ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 2 #" ("
0 0 14 3 8 #"word-str"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 5 #")))) "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; - remove-letter String -> String"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #"; Removes the last letter from the string if there is one else retur"
 #"ns empty string"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"remove-letter"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"Test\""
0 0 23 3 2 #") "
0 0 19 3 5 #"\"Tes\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"remove-letter"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"remove-letter"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #"; --------------"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";stop when:"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; - stop World -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 73
(
 #";    - determines when to stop game and words have reached limit of "
 #"grid "
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-over"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Word1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"EndWord\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                           ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"EndWord1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 19 3 6 #"\"test\""
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-over"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 7 #"\"Word1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 1 #" "
0 0 20 3 2 #"20"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"EndWord\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 19 3 6 #"\"test\""
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 14 3 5 #"false"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                     "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"game-over"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"check-limit"
0 0 23 3 2 #" ("
0 0 14 3 20 #"world-inactive-words"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 13 #";check-limit:"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; - LoW -> Boolean"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";     - checks if any inactive word has posn-y of y=0 (top of grid)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"check-limit"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"EndWord\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"EndWord1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"check-limit"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"EndWord\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"EndWord1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"check-limit"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"EndWord\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 9 #"make-word"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"EndWord1\""
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; UPDATE - uses ormap rather than recursion"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"check-limit"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"w"
0 0 23 3 3 #") ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 23 3 2 #" ("
0 0 14 3 13 #"word-position"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 5 #")))) "
0 0 14 3 3 #"low"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                         "
0 0 23 29 1 #"\n"
0 0 17 3 7 #"; last-"
0 0 17 3 21 #"scene: World -> Image"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; outputs the score when the game has ended"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"last-scene"
0 0 23 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 23 3 1 #" "
0 0 14 3 5 #"list1"
0 0 23 3 1 #" "
0 0 14 3 5 #"list2"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #" "
0 0 14 3 5 #"false"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 17 #"\"Your score is: \""
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 14 #"number->string"
0 0 23 3 1 #" "
0 0 20 3 3 #"100"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                           "
0 0 14 3 5 #"SCENE"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"last-scene"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 17 #"\"Your score is: \""
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 14 #"number->string"
0 0 23 3 2 #" ("
0 0 14 3 5 #"round"
0 0 23 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 9 #"FONT-SIZE"
0 0 23 3 1 #" "
0 0 14 3 12 #"TYPING-COLOR"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 11 #"SCENE-WIDTH"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 14 3 12 #"SCENE-HEIGHT"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 5 #"SCENE"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"main"
0 0 23 3 1 #" "
0 0 20 3 3 #"0.1"
0 0 23 3 1 #")"
0           0
=======
;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname assignment10) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))

(require 2htdp/image)
(require 2htdp/universe)

;Constants
(define GRID-HEIGHT 40)
(define GRID-WIDTH 40)
(define CELL-HEIGHT 15)
(define CELL-WIDTH 15)
(define ACTIVE-COLOR "green")
(define TYPING-COLOR "purple")
(define STUCK-COLOR "red")
(define TYPING-BOX-HEIGHT 20)
(define SCENE-HEIGHT (+ TYPING-BOX-HEIGHT (* GRID-HEIGHT CELL-HEIGHT)))
(define SCENE-WIDTH (* GRID-WIDTH CELL-WIDTH))
(define SCENE (empty-scene SCENE-WIDTH SCENE-HEIGHT))
(define FONT-SIZE CELL-HEIGHT)
(define TYPING-X (/ SCENE-WIDTH 2))
(define TYPING-Y (- SCENE-HEIGHT (/ TYPING-BOX-HEIGHT 2)))
(define LIM-TICK-DEFAULT 20)

;List of words used for generate-word function
(define DICTIONARY (list "random"
                         "spaghetti" 
                         "generate" 
                         "affordable"
                         "dairy"
                         "lamppost"
                         "endurance"
                         "koala"
                         "riesling"
                         "computer"
                         "never"
                         "diabolical"
                         "giraffe" ))
                    
;A Word is a (make-word String posn)
(define-struct word [str position])
; where:
; - str is the String value of the word
; - position is the x and y position of the word on the grid
(define w1 (make-word "hello" (make-posn 0 0)))
(define w2 (make-word "friend" (make-posn 15 10)))
(define w3 (make-word "chip" (make-posn 25 20)))
(define w4 (make-word "bottom" (make-posn 25 39)))

#;
(define (word-tmpl w)
  ...(word-str w)...(posn-x (word-position w))...(posn-y (word-position w)))

;A List of Words (LoW) is one of:
; - empty '()
; - cons(Word LoW)
(define list0 empty)
(define list1 (list w1 w2 w3))
(define list2 (list w4))

#;
(define (low-tmpl low)
  (cond
    [(empty? low) ...]
    [(cons? low) ... (first low) ... (low-tmpl (rest low))]))

; A world (w) is one of:
; - (make-world LoW LoW String Boolean Number)
(define-struct world [falling-words inactive-words current-word gen-word? score tick lim-tick])
; A world represents
; - falling words represents the list of falling words
; - inactive-words represents the list of words that have fallen and are no longer falling.
; - current-word is what the user has typed
; - gen-word? is the boolean that tells whether to generate a new word
; - score is the number of process ticks that have passed
; - tick is to manage the variable tick rate (EXTRA CREDIT)
; - lim-tick is the tick number to process the world on (EXTRA CREDIT)
(define world1 (make-world list1 list2 "" false 1 0 LIM-TICK-DEFAULT))

#;
(define (world-tmpl w)
  ...(world-falling-words w)...
  ...(world-inactive-words w)...
  ...(world-current-word w)...
  ...(world-gen-word? w)...
  ...(world-score w)...
  ...(world-tick w)...
  ...(world-lim-tick w)...)

;----
;on tick:
; - process : World -> World
;        - Reconstructs the world assuring all updates are handled

;Testing & randomness- verifying that process returns a world with various input variables
; Cannot determine exact output with check-expects due to randomness
(check-expect (world? (process (make-world list1 list2 "" false 1 10 10))) #t)
(check-expect (world? (process (make-world list0 list2 "" true 100 10 10))) #t)
(check-expect (world? (process (make-world list0 list0 "" false 30 0 10))) #t) 
; bool gen-word? is the one of the two things directly affected
; by this function and not a helper, in two if cases
(check-expect (world-gen-word? (process (make-world list0 list0 "" false 30 10 10))) #t)
(check-expect (world-gen-word? (process (make-world list0 list0 "" false 30 9 10))) #f)
; The other is the extra credit tick value. This makes the tick rate (tr) in main
; multiplicative of the lim-tick rate by incrementing here until gte
(check-expect (world-tick (process (make-world list0 list0 "" false 30 10 10))) 0)
(check-expect (world-tick (process (make-world list0 list0 "" false 30 9 10))) 10)

(define (process w)
  (if (>= (world-tick w) (world-lim-tick w))
  (make-world
     (generate-word-maybe
      (lower-words (world-falling-words w) (world-inactive-words w))
      (world-gen-word? w))
     (get-inactives (world-falling-words w) (world-inactive-words w))
     (world-current-word w)
     (not (world-gen-word? w)) ;flip the bool so we do/dont generate next process tick
     (update-score (world-score w) (world-lim-tick w))
     0
     (world-lim-tick w))
  (make-world
     (world-falling-words w)
     (world-inactive-words w)
     (world-current-word w)
     (world-gen-word? w)
     (world-score w)
     (+ 1 (world-tick w))
     (world-lim-tick w))))


; x-range-overlap? Number Number Number Number -> Boolean
; Checks if x1 and len1 range has an overlap with x2 and len2 range
(define (x-range-overlap? x1 len1 x2 len2)
  (cond [(= x1 x2) true]
        [(< x1 x2) (> (+ x1 len1) x2)]
        [(> x1 x2) (< x1 (+ x2 len2))]))
(check-expect (x-range-overlap? 0 10 0 1) true)
(check-expect (x-range-overlap? 0 1 1 1) false)
(check-expect (x-range-overlap? 0 2 1 1) true)
(check-expect (x-range-overlap? 5 5 10 10) false)
(check-expect (x-range-overlap? 5 5 9 10) true)
(check-expect (x-range-overlap? 10 5 5 5) false)
(check-expect (x-range-overlap? 10 5 5 10) true)
               
; - would-intersect? : Word Word -> Boolean
; Checks if Word 1 would intersect with inactive Word 2 if moved down
(check-expect (would-intersect? w1 w2) #f)
(check-expect (would-intersect? w1 w2) #f)
(check-expect (would-intersect? w3 (make-word "chip2" (make-posn 24 21))) #t)

(define (would-intersect? w1 w2)
  ;They will intersect if w2's y is the same as w1's y + 1,
  ;and the x to x+len(string) range of w1 doesn't overlap with w2's
  (and (= (posn-y (word-position w2)) (+ 1 (posn-y (word-position w1))))
       (x-range-overlap? (posn-x (word-position w1)) (string-length (word-str w1))
                         (posn-x (word-position w2)) (string-length (word-str w2)))))

; - make-inactive? : Word LoW (loiw) -> Boolean
; Checks if word hits bottom or any inactive words
(check-expect (make-inactive? w1 list0) #f)
(check-expect (make-inactive? w4 list0) #t)
(check-expect (make-inactive? (make-word "Test" (make-posn 11 19)) list1) #f)

(define (make-inactive? w low)
  (cond [(empty? low)
         ;if no intersect with words, return whether it's on the bottom or not
         (= (- GRID-HEIGHT 1) (posn-y (word-position w)))]
        [(cons? low)
         ; else check if it intersects with the first word
         (or (would-intersect? w (first low)) (make-inactive? w (rest low)))]))      

  
; - get-inactives : LoW -> LoW
; If inactive, add to list of inactive words
(check-expect (get-inactives list0 list2) list2)
(check-expect (get-inactives list1 list2) 
              (cons (make-word "bottom" (make-posn 25 39)) empty))
(check-expect (get-inactives (list (make-word "hello" (make-posn 12 32))
                                   (make-word "hello1" (make-posn 0 39))
                                   (make-word"hello2" (make-posn 12 0))) 
                              list2)
              (cons (make-word "hello1" (make-posn 0 39)) 
                    (cons(make-word "bottom" (make-posn 25 39)) empty)))

(define (get-inactives lofw loiw)
  (cond
    [(empty? lofw) loiw]
    [(cons? lofw) (if (make-inactive? (first lofw) loiw)
                     (cons (first lofw) (get-inactives (rest lofw) loiw))
                     (get-inactives (rest lofw) loiw))]))                     

;lower-word : Word -> Word
; Increases the y value of the word by 1
(check-expect (lower-word (make-word "Test1" (make-posn 10 10)))
              (make-word "Test1" (make-posn 10 11)))
(check-expect (lower-word (make-word "Test2" (make-posn 0 0)))
              (make-word "Test2" (make-posn 0 1)))

(define (lower-word w)
  (make-word (word-str w)
             (make-posn
              (posn-x (word-position w))
              (+ 1(posn-y (word-position w))))))

 
; - lower-words : LoW LoW -> LoW
; Lower all of the falling worlds by one row, takes lofw and loiw
(check-expect (lower-words list0 list2) empty)
(check-expect (lower-words list1 list2) (list (make-word "hello" (make-posn 0 1))
                                              (make-word "friend" (make-posn 15 11))
                                              (make-word "chip" (make-posn 25 21))))
(check-expect (lower-words (list (make-word "hello1" (make-posn 10 10))
                                 (make-word "hello2" (make-posn 15 39))
                                 (make-word "hello3" (make-posn 10 35)))
                           list2) (cons (make-word "hello1" (make-posn 10 11))
                                        (cons (make-word "hello3" (make-posn 10 36)) empty)))
        
(define (lower-words lofw loiw)
  (cond
    [(empty? lofw) empty]
    [(cons? lofw) (if (make-inactive? (first lofw) loiw)
                     (lower-words (rest lofw) loiw)
                     (cons (lower-word (first lofw))
                           (lower-words (rest lofw) loiw)))]))


;get-word-at-n : LoS Number -> String
;   - given a dictionary of words and an index, returns the word at that index
(check-expect (get-word-at-n list0 0) "")
(check-expect (get-word-at-n list1 2) w3)

(define (get-word-at-n los n)
  (cond
    [(empty? los) ""]
    [(cons? los) (if (= n 0)
                     (first los)
                     (get-word-at-n (rest los) (- n 1)))]))
  
; - get-new-word : LoS -> Word
;        - Get a random word string
(check-expect (word? (get-new-word DICTIONARY)) #t)

(define (get-new-word los)
    (make-word (get-word-at-n los (random (length los)))
               (make-posn 0 0)))

; randomize-posx : Word -> Word
; Takes a new word and updates its x coordinate
;        -Should generate a random x less than the (edge-length)
(check-expect (word? (randomize-posx w1)) #t)

(define (randomize-posx w)
  (make-word (word-str w)
             (make-posn (random (- (+ 1 GRID-WIDTH) (string-length (word-str w)))) 0)))

; - generate-word-maybe : LoW Boolean -> LoW
; Create new word every other tick (update boolean of World)
(check-expect (cons? (generate-word-maybe list1 false))#t)
(check-expect (cons? (generate-word-maybe list1 true))#t)
(check-expect (cons? (generate-word-maybe list0 false))#f)

(define (generate-word-maybe low gen?)
  (if gen?
      (cons (randomize-posx (get-new-word DICTIONARY)) low)
      low))

; - update-score: Number Number -> Number
;        -Keeping score of game
(check-expect (update-score 0 LIM-TICK-DEFAULT) 1)
(check-expect (update-score 100 (/ LIM-TICK-DEFAULT 2)) 102)

(define (update-score score freq)
  ; The overall score is time lasted * inverse frequency
  ; Inverse frequency by default is 1, which we define as the 
  ; standard every other tick rate. If using the "up" and "down"
  ; features, the addition to the score will reflect the difficulty
  ; For example, if default is dropped from 20 to 10, 2 points are 
  ; added at each process tick, as it is twice as difficult
  (+ score (/ LIM-TICK-DEFAULT freq)))

;----------------
;to draw:

; - render-world World -> Image
;Render the 3 parts of the world
(check-expect (render-world world1)
              (place-falling-words (world-falling-words world1)
                                   (place-inactive-words (world-inactive-words world1)
                                                         (place-current-word 
                                                          (world-current-word world1) SCENE))))
(define (render-world w)
    (place-falling-words (world-falling-words w)
                         (place-inactive-words (world-inactive-words w)
                                               (place-current-word 
                                                (world-current-word w) SCENE))))

; List of Strings (LOS) is one of:
; - empty
; - cons(String LOS)
(define los1 (explode "TEST"))
#;
(define (los-templ los)
  (cond [(empty? los) ...]
        [(cons? los) ... (first los) ... (los-templ (rest los))]))

; grid-to-pix-x: Number -> Number 
; Gives the pixel value of the desired column
(check-expect (grid-to-pix-x 10) 157.5)
(check-expect (grid-to-pix-x 0) 7.5)

(define (grid-to-pix-x x)
  (* (+ x 0.5) CELL-WIDTH))

; grid-to-pix-y: Number -> Number 
; Gives the pixel value of the desired row
(check-expect (grid-to-pix-y 10) 157.5)
(check-expect (grid-to-pix-y 0) 7.5)
(define (grid-to-pix-y y)
  (* (+ y 0.5) CELL-HEIGHT))

; place-letters: LoS Posn Color Image -> Image
; Places an exploded word on the grid
(check-expect (place-letters los1 0 0 "red" SCENE)
              (place-image (text "T" 15 "red") 7.5 7.5
                           (place-image (text "E" 15 "red") 22.5 7.5
                                        (place-image (text "S" 15 "red") 37.5 7.5
                                                     (place-image (text "T" 15 "red")
                                                                  52.5 7.5 SCENE)))))

(define (place-letters los x y c scene)
  (cond [(empty? los) scene]
        [(cons? los) (place-image (text (first los) FONT-SIZE c)
                                  (grid-to-pix-x x) (grid-to-pix-y y)
                                  (place-letters (rest los) (+ x 1) y c scene))]))

; place-word: Word Color Image -> Image
; Places a single word on the scene with the appropriate color
(check-expect (place-word w1 ACTIVE-COLOR SCENE)
              (place-letters (list "h" "e" "l" "l" "o") 0 0 "green" SCENE))
(check-expect (place-word w2 TYPING-COLOR SCENE)
              (place-letters (list "f" "r" "i" "e" "n" "d") 15 10 "purple" SCENE))

(define (place-word w c scene)
  (place-letters (explode (word-str w))
               (posn-x (word-position w))
               (posn-y (word-position w))
               c
               scene))
              
; -place-falling-words LoW -> Image
;Place the falling words with the appropriate color
(define (place-falling-words lofw scene)
    (cond
    [(empty? lofw) scene]
    [(cons? lofw) (place-word (first lofw) ACTIVE-COLOR
                              (place-falling-words (rest lofw) scene))]))
(check-expect (place-falling-words list0 SCENE) SCENE)
(check-expect (place-falling-words list1 SCENE)
              (place-word w1 "green"
                          (place-word w2 "green"
                                      (place-word w3 "green"
                                                  SCENE))))

; - place-inactive-words LoW -> Image
;Place the inactive words with the appropriate color
(check-expect (place-inactive-words list0 SCENE) SCENE)
(check-expect (place-inactive-words list1 SCENE)
              (place-word w1 "red"
                          (place-word w2 "red"
                                      (place-word w3 "red"
                                                  SCENE))))
(check-expect (place-inactive-words list2 SCENE)
              (place-word w4 "red" SCENE))

(define (place-inactive-words loiw scene)
    (cond
    [(empty? loiw) scene]
    [(cons? loiw) (place-word (first loiw) STUCK-COLOR
                              (place-inactive-words (rest loiw) scene))]))

; - place-current-word String -> Image
;Place the current word with the appropriate color
(check-expect (place-current-word "test" SCENE)
              (place-image (text "test" FONT-SIZE TYPING-COLOR) TYPING-X TYPING-Y SCENE))

(define (place-current-word str scene)
  (place-image (text str FONT-SIZE TYPING-COLOR) TYPING-X TYPING-Y scene))

; -------------------
;on key:

; - update-word World KeyEvent -> World
;       -if alphabetic, add letter,
;       -if backspace, remove-letter,
;       -if enter, delete-word, ( use remove function )
;       -if else, do nothing
              ;alphabetic
(check-expect (update-word (make-world list1 list2 "" false 10 0 10) "a")
              (make-world list1 list2 "a" false 10 0 10))
              ;backspace
(check-expect (update-word (make-world list1 list2 "test" false 10 0 10) "\b")
              (make-world list1 list2 "tes" false 10 0 10))
              ;enter
(check-expect (update-word (make-world list1 list2 "friend" false 10 0 10) "\r")
              (make-world (cons w1 (cons w3 empty)) (cons w4 empty) "" false 10 0 10))
              ;down - EX. Cred.
(check-expect (update-word (make-world list1 list2 "test" false 10 0 10) "down")
              (make-world list1 list2 "test" false 10 0 9))
              ;up - EX. Cred.
(check-expect (update-word (make-world list1 list2 "test" false 10 0 10) "up")
              (make-world list1 list2 "test" false 10 0 11))
              ;else
(check-expect (update-word (make-world list1 list2 "" false 10 0 10) "\t")
             (make-world list1 list2 "" false 10 0 10))

(define (update-word w key)
  (cond [(and (string-alphabetic? key) (= (string-length key) 1))
         (make-world
          (world-falling-words w)
          (world-inactive-words w)
          (string-append (world-current-word w) key)
          (world-gen-word? w)
          (world-score w)
          (world-tick w)
          (world-lim-tick w))]
        [(key=? key "\b")
         (make-world
          (world-falling-words w)
          (world-inactive-words w)
          (remove-letter (world-current-word w))
          (world-gen-word? w)
          (world-score w)
          (world-tick w)
          (world-lim-tick w))]
        [(key=? key "\r")
         (make-world
          (remove-word (world-current-word w) (world-falling-words w))
          (world-inactive-words w)
          ""
          (world-gen-word? w)
          (world-score w)
          (world-tick w)
          (world-lim-tick w))]
        ; This is not an infinite increase!
        [(key=? key "down")
          (make-world
          (world-falling-words w)
          (world-inactive-words w)
          (world-current-word w)
          (world-gen-word? w)
          (world-score w)
          (world-tick w)
          (max 2 (- (world-lim-tick w) 1)))]
        ; This is an infinite increase!
        [(key=? key "up")
          (make-world
          (world-falling-words w)
          (world-inactive-words w)
          (world-current-word w)
          (world-gen-word? w)
          (world-score w)
          (world-tick w)
          (+ 1 (world-lim-tick w)))]        
        [else w]))

;remove-word : String LoW -> LoW
; Removes any word matching the string from the LoW
(check-expect (remove-word (word-str w1) list1) (list w2 w3))
(check-expect (remove-word (word-str w2) list1) (list w1 w3))
(check-expect (remove-word (word-str w1) list0) empty)

(define (remove-word str low)
  (cond
    [(empty? low) empty]
    [(cons? low) (if (string=? str (word-str (first low)))
                     (remove-word str (rest low)) 
                     (cons (first low) (remove-word str (rest low))))]))


; - remove-letter String -> String
; Removes the last letter from the string if there is one else returns empty string

(check-expect (remove-letter "Test") "Tes")
(check-expect (remove-letter "") "")

(define (remove-letter s)
  (if (= 0 (string-length s))
      "" (substring s 0 (- (string-length s) 1))))


; --------------
;stop when:
; - stop World -> Boolean
;    - determines when to stop game and words have reached limit of grid 
(check-expect (game-over (make-world (list (make-word "Word1" (make-posn 30 20)))
                                     (list (make-word "EndWord" (make-posn 11 0))
                                           (make-word "EndWord1" (make-posn 9 12)))
                                     "test"
                                     false
                                     1 0 10)) #t)
(check-expect (game-over (make-world (list (make-word "Word1" (make-posn 30 20)))
                                     (list (make-word "EndWord" (make-posn 10 12)))
                                     "test"
                                     false
                                     1 0 10)) #f)

(define (game-over w)
  (check-limit (world-inactive-words w)))

;check-limit:
; - LoW -> Boolean
;     - checks if any inactive word has posn-y of y=0 (top of grid)
(check-expect (check-limit (list (make-word "EndWord" (make-posn 10 0))
                                 (make-word "EndWord1" (make-posn 9 12)))) #t)
(check-expect (check-limit (list (make-word "EndWord" (make-posn 14 12))
                                 (make-word "EndWord1" (make-posn 9 12)))) #f)
(check-expect (check-limit (list (make-word "EndWord" (make-posn 5 12))
                                 (make-word "EndWord1" (make-posn 12 0)))) #t)
(define (check-limit low)
 (cond
    [(empty? low) #f]
    [(cons? low) (or (= 0  (posn-y (word-position (first low))))
                 (check-limit (rest low)))]))
                                                         
; - last scene: World -> Image
;     - outputs the score when the game has ended
(check-expect (last-scene (make-world list1 list2 "" false 100 0 10))
              (place-image (text (string-append "Your score is: "
                                                (number->string 100))
                                 FONT-SIZE TYPING-COLOR)
                           (- SCENE-WIDTH (/ SCENE-WIDTH 2))
                           (- SCENE-HEIGHT (/ SCENE-HEIGHT 2))
                           SCENE)) 
(define (last-scene w)
  (place-image (text (string-append "Your score is: "
                                      (number->string (round (world-score w))))
                     FONT-SIZE TYPING-COLOR)
               (- SCENE-WIDTH (/ SCENE-WIDTH 2))
               (- SCENE-HEIGHT (/ SCENE-HEIGHT 2))
               SCENE))

; play-game: World Number -> World or Image (last-scene is image)
; Runs the Typaholic! game. Inputted tick rate will be reflected every
; LIM-TICK-DEFAULT ticks. This is mitigated by running the (main tr) function
(define (play-game world tr)
  (big-bang world
            [on-tick process tr]
            [to-draw render-world]
            [on-key update-word]
            [stop-when game-over last-scene]))
; Cannot test (Big Bang breaks the design recipe)
; main: Number -> World or Image (last-scene is image)
; helper function to start the game easier if it helps
(define (main tr)
  (play-game (make-world (list) (list) "" false 1 0 LIM-TICK-DEFAULT)
             (if (>= tr 0.5) (/ tr LIM-TICK-DEFAULT) (/ 0.5 LIM-TICK-DEFAULT))))
; Cannot test (Big Bang breaks the design recipe)
; A NOTE ON THE 0.5 tr:
; The score is not variable by the tick rate, only by the frequency defined by the
; world-tick and world-lim-tick, so to maintain consistency in the score, the same
; number should be used here. It's possible to make a really slow number here, and then
; hit "down" to the max and get a crazy good score on slow moving words, so don't cheat that way!
(main 0.5)
